name: Continuous Integration

on:
  push:
    branches:
    - main
    tags:
    - '*'
  pull_request:

# SECRETS
# - GH_RELEASE_NOTES_TOKEN: personal access token of `rasabot` github account
#                           (login for account in 1pw)
# - SLACK_WEBHOOK_TOKEN: token to post to RasaHQ slack account (in 1password)
# - PYPI_TOKEN: publishing token for amn41 account, needs to be maintainer of
#               RasaHQ/rasa on pypi (account credentials in 1password)
# - DOCKERHUB_PASSWORD: password for an account with write access to the rasa
#                       repo on hub.docker.com. used to pull and upload containers
# - RASA_OSS_TELEMETRY_WRITE_KEY: key to write to segment. Used to report telemetry.
#                                 The key will be added to the distributions
# - RASA_OSS_EXCEPTION_WRITE_KEY: key to write to sentry. Used to report exceptions.
#                                 The key will be added to the distributions.
#                                 Key can be found at https://sentry.io/settings/rasahq/projects/rasa-open-source/install/python/
# - SENTRY_AUTH_TOKEN: authentication used to tell Sentry about any new releases
#                      created at https://sentry.io/settings/account/api/auth-tokens/

env:
  # needed to fix issues with boto during testing:
  # https://github.com/travis-ci/travis-ci/issues/7940
  BOTO_CONFIG: /dev/null
  IS_TAG_BUILD: ${{ startsWith(github.event.ref, 'refs/tags') }}
  DOCKERHUB_USERNAME: tmbo
  DEFAULT_PYTHON_VERSION: '3.7'

jobs:
  changes:
    name: Check for file changes
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      docker: ${{ steps.filter.outputs.docker }}
      docs: ${{ steps.filter.outputs.docs }}
    steps:
      - uses: actions/checkout@v2
      - uses: RasaHQ/pr-changed-files-filter@c4f7116a04b8a4596313469429e2ad235f59d9c4
        id: filter
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          filters: .github/change_filters.yml

  documentation:
    name: Test Documentation
    runs-on: ubuntu-latest
    needs: [changes]

    steps:
    - name: Checkout git repository 🕝
      if: needs.changes.outputs.docs == 'true'
      uses: actions/checkout@v2

    - name: Set up Python ${{ env.DEFAULT_PYTHON_VERSION }} 🐍
      if: needs.changes.outputs.docs == 'true'
      uses: actions/setup-python@v1
      with:
        python-version: ${{ env.DEFAULT_PYTHON_VERSION }}

    - name: Set up Node 12.x 🦙
      if: needs.changes.outputs.docs == 'true'
      uses: actions/setup-node@v1
      with:
        node-version: '12.x'

    - name: Read Poetry Version 🔢
      if: needs.changes.outputs.docs == 'true'
      run: |
        echo "POETRY_VERSION=$(scripts/poetry-version.sh)" >> $GITHUB_ENV
      shell: bash

    - name: Install poetry 🦄
      if: needs.changes.outputs.docs == 'true'
      uses: Gr1N/setup-poetry@v4
      with:
        poetry-version: ${{ env.POETRY_VERSION }}

    - name: Load Poetry Cached Libraries ⬇
      if: needs.changes.outputs.docs == 'true'
      uses: actions/cache@v2
      with:
        path: ~/.cache/pypoetry/virtualenvs
        key: ${{ runner.os }}-poetry-${{ env.POETRY_VERSION }}-${{ env.DEFAULT_PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}-${{ secrets.POETRY_CACHE_VERSION }}
        restore-keys: ${{ runner.os }}-poetry-${{ env.DEFAULT_PYTHON_VERSION }}

    - name: Load Yarn Cached Packages ⬇
      if: needs.changes.outputs.docs == 'true'
      uses: actions/cache@v2
      with:
        path: docs/node_modules
        key: ${{ runner.os }}-yarn-12.x-${{ hashFiles('docs/yarn.lock') }}
        restore-keys: ${{ runner.os }}-yarn-12.x

    - name: Install Dependencies 📦
      if: needs.changes.outputs.docs == 'true'
      run: |
        sudo apt-get -y install libpq-dev
        make install-full install-docs

    - name: Run Swagger 🕵️‍♀️
      if: needs.changes.outputs.docs == 'true'
      run: |
        npm install -g swagger-cli
        swagger-cli validate docs/static/spec/action-server.yml
        swagger-cli validate docs/static/spec/rasa.yml

    - name: Test Docs 🕸
      if: needs.changes.outputs.docs == 'true'
      run: make test-docs

  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: [changes]

    steps:
    - name: Checkout git repository 🕝
      if: needs.changes.outputs.backend == 'true'
      uses: actions/checkout@v2

    - name: Set up Python ${{ env.DEFAULT_PYTHON_VERSION }} 🐍
      if: needs.changes.outputs.backend == 'true'
      uses: actions/setup-python@v1
      with:
        python-version: ${{ env.DEFAULT_PYTHON_VERSION }}

    - name: Read Poetry Version 🔢
      if: needs.changes.outputs.backend == 'true'
      run: |
        echo "POETRY_VERSION=$(scripts/poetry-version.sh)" >> $GITHUB_ENV
      shell: bash

    - name: Install poetry 🦄
      if: needs.changes.outputs.backend == 'true'
      uses: Gr1N/setup-poetry@v4
      with:
        poetry-version: ${{ env.POETRY_VERSION }}

    - name: Load Poetry Cached Libraries ⬇
      if: needs.changes.outputs.backend == 'true'
      uses: actions/cache@v2
      with:
        path: ~/.cache/pypoetry/virtualenvs
        key: ${{ runner.os }}-poetry-${{ env.POETRY_VERSION }}-${{ env.DEFAULT_PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}-${{ secrets.POETRY_CACHE_VERSION }}
        restore-keys: ${{ runner.os }}-poetry-${{ env.DEFAULT_PYTHON_VERSION }}

    - name: Install Dependencies 📦
      if: needs.changes.outputs.backend == 'true'
      run: |
        sudo apt-get -y install libpq-dev
        make install-full

    - name: Checkout target branch to be able to diff
      if: needs.changes.outputs.backend == 'true' && github.event_name == 'pull_request'
      run: |
        git fetch origin ${{ github.base_ref }}
        echo "DOCSTRING_DIFF_BRANCH=origin/${{ github.base_ref }}" >> $GITHUB_ENV

        # Fetch entire history for current branch so that `make lint-docstrings`
        # can calculate the proper diff between the branches
        git fetch --unshallow origin "${{ github.ref }}"

    - name: Lint Code 🎎
      if: needs.changes.outputs.backend == 'true'
      run: |
        # If it's not a pull request, $DOCSTRING_DIFF_BRANCH is unset.
        # This will result in an empty diff, which effictively means that
        # make lint-docstrings will be skipped for other events than `pull_request`
        make lint BRANCH=$DOCSTRING_DIFF_BRANCH

    - name: Check Types 📚
      if: needs.changes.outputs.backend == 'true'
      run: make types

    - name: Test CLI 🖥
      if: needs.changes.outputs.backend == 'true'
      # makes sure we catch any dependency error early. they will create strange
      # errors during the docs build, so easier to catch them early on by
      # trying to run the `rasa` command once before the docs build.
      run: poetry run rasa --help

  test:
    name: Run Tests
    runs-on: ${{ matrix.os }}
    needs: [changes]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: [3.6, 3.7, 3.8]

    steps:
    - name: Checkout git repository 🕝
      if: needs.changes.outputs.backend == 'true'
      uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }} 🐍
      if: needs.changes.outputs.backend == 'true'
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}

    - name: Read Poetry Version 🔢
      if: needs.changes.outputs.backend == 'true'
      run: |
        echo "POETRY_VERSION=$(scripts/poetry-version.sh)" >> $GITHUB_ENV
      shell: bash

    - name: Install poetry 🦄
      if: needs.changes.outputs.backend == 'true'
      uses: Gr1N/setup-poetry@v4
      with:
        poetry-version: ${{ env.POETRY_VERSION }}

    - name: Load Poetry Cached Libraries ⬇
      id: cache-poetry
      if: needs.changes.outputs.backend == 'true'
      uses: actions/cache@v2
      with:
        path: .venv
        key: ${{ runner.os }}-poetry-${{ env.POETRY_VERSION }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}-venv-${{ secrets.POETRY_CACHE_VERSION }}

    - name: Clear Poetry cache
      if: steps.cache-poetry.outputs.cache-hit == 'true' && needs.changes.outputs.backend == 'true' && contains(github.event.pull_request.labels.*.name, 'tools:clear-poetry-cache-unit-tests')
      run: rm -r .venv

      # Poetry >= 1.1.0b uses virtualenv to create a virtual environment.
      # The virtualenv simply doesn't work on Windows with our setup,
      # that's why we use venv to create virtual environment
    - name: Create virtual environment
      if: (steps.cache-poetry.outputs.cache-hit != 'true' || contains(github.event.pull_request.labels.*.name, 'tools:clear-poetry-cache-unit-tests')) && needs.changes.outputs.backend == 'true'
      run: python -m venv create .venv

    - name: Set up virtual environment
      if: needs.changes.outputs.backend == 'true'
      # Poetry on Windows cannot pick up the virtual environments directory properly,
      # and it creates a new one every time the pipeline runs.
      # This step solves this problem — it tells poetry to always use `.venv` directory inside
      # the project itself, which also makes it easier for us to determine the correct directory
      # that needs to be cached.
      run: poetry config virtualenvs.in-project true


    - name: Install Dependencies (Linux) 📦
      if: needs.changes.outputs.backend == 'true' && matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get -y install libpq-dev
        make install-full | tee .output
        if grep 'The lock file is not up to date' .output; then exit 1; fi
        make prepare-tests-ubuntu

    - name: Install Dependencies (Windows) 📦
      if: needs.changes.outputs.backend == 'true' && matrix.os == 'windows-latest'
      # Restoring cache doesn't work properly on Windows due to symlinks.
      # We create symlinks for spacy models, that's why we need to clean them up
      # before caching the dependencies directory.
      # More information: https://github.com/actions/cache/issues/120
      run: |
        $spacy_data_dir = ".venv\lib\site-packages\spacy\data"
        if (Test-Path $spacy_data_dir) {
          Get-ChildItem -Force -ErrorAction Stop $spacy_data_dir | Where-Object { if($_.Attributes -match "ReparsePoint"){$_.Delete()} }
          Remove-Item -Force -Recurse $spacy_data_dir
          New-Item -Path $spacy_data_dir -Type Directory
        }
        make install-full
        make prepare-tests-windows

    - name: Test Code 🔍
      if: needs.changes.outputs.backend == 'true' && !(matrix.python-version == 3.8 && matrix.os == 'windows-latest')
      env:
        JOBS: 2
        PYTHONIOENCODING: "utf-8"
      run: |
        make test

    - name: Send Coverage Report 📊
      if: needs.changes.outputs.backend == 'true' && matrix.python-version == 3.6 && matrix.os != 'windows-latest'
      env:
        COVERALLS_REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        COVERALLS_SERVICE_NAME: github
      run: poetry run coveralls

  integration_test:
    name: Run Integration Tests
    runs-on: ubuntu-latest
    needs: [changes]
    env:
      REDIS_HOST: localhost
      REDIS_PORT: 6379
      POSTGRES_HOST: localhost
      POSTGRES_PORT: 5432
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      RABBITMQ_HOST: localhost
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: guest
      RABBITMQ_PASSWORD: guest

    services:
      redis:
        image: redis:6
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # FIXME: cannot use ${{ env.REDIS_PORT }} here
          # mapping container ports to the host
          - 6379:6379

      postgres:
        image: postgres:13
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        env:
          # postgres image requires password to be set
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        ports:
          # FIXME: cannot use ${{ env.POSTGRES_PORT }} here
          # mapping container ports to the host
          - 5432:5432

      rabbitmq:
        # see https://github.com/docker-library/healthcheck/blob/master/rabbitmq/docker-healthcheck
        image: healthcheck/rabbitmq
        ports:
          - 5672:5672

    steps:
    - name: Checkout git repository 🕝
      if: needs.changes.outputs.backend == 'true'
      uses: actions/checkout@v2

    - name: Set up Python ${{ env.DEFAULT_PYTHON_VERSION }} 🐍
      if: needs.changes.outputs.backend == 'true'
      uses: actions/setup-python@v1
      with:
        python-version: ${{ env.DEFAULT_PYTHON_VERSION }}

    - name: Read Poetry Version 🔢
      if: needs.changes.outputs.backend == 'true'
      run: |
        echo "POETRY_VERSION=$(scripts/poetry-version.sh)" >> $GITHUB_ENV
      shell: bash

    - name: Install poetry 🦄
      if: needs.changes.outputs.backend == 'true'
      uses: Gr1N/setup-poetry@v4
      with:
        poetry-version: ${{ env.POETRY_VERSION }}

    - name: Load Poetry Cached Libraries ⬇
      id: cache-poetry
      if: needs.changes.outputs.backend == 'true'
      uses: actions/cache@v2
      with:
        path: .venv
        key: ${{ runner.os }}-poetry-${{ env.POETRY_VERSION }}-${{ env.DEFAULT_PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}-venv-${{ secrets.POETRY_CACHE_VERSION }}

    - name: Clear Poetry cache
      if: steps.cache-poetry.outputs.cache-hit == 'true' && needs.changes.outputs.backend == 'true' && contains(github.event.pull_request.labels.*.name, 'tools:clear-poetry-cache-unit-tests')
      run: rm -r .venv

      # Poetry >= 1.1.0b uses virtualenv to create a virtual environment.
      # The virtualenv simply doesn't work on Windows with our setup,
      # that's why we use venv to create virtual environment
    - name: Create virtual environment
      if: (steps.cache-poetry.outputs.cache-hit != 'true' || contains(github.event.pull_request.labels.*.name, 'tools:clear-poetry-cache-unit-tests')) && needs.changes.outputs.backend == 'true'
      run: python -m venv create .venv

    - name: Set up virtual environment
      if: needs.changes.outputs.backend == 'true'
      # Poetry on Windows cannot pick up the virtual environments directory properly,
      # and it creates a new one every time the pipeline runs.
      # This step solves this problem — it tells poetry to always use `.venv` directory inside
      # the project itself, which also makes it easier for us to determine the correct directory
      # that needs to be cached.
      run: poetry config virtualenvs.in-project true

    - name: Install Dependencies (Linux) 📦
      if: needs.changes.outputs.backend == 'true'
      run: |
        sudo apt-get -y install libpq-dev
        make install-full | tee .output
        if grep 'The lock file is not up to date' .output; then exit 1; fi
        make prepare-tests-ubuntu

    - name: Test Code with Services 🩺
      if: needs.changes.outputs.backend == 'true'
      env:
        JOBS: 2
        INTEGRATION_TEST_PYTEST_MARKERS: '"not sequential"'
        PYTHONIOENCODING: "utf-8"
      run: |
        make test-integration

    # these integration tests need to be ran in a sequential fashion,
    # due to environment constraints, so we're running them in a single process.
    - name: Test Code with Services 🩺 (sequential)
      if: needs.changes.outputs.backend == 'true'
      env:
        JOBS: 1
        INTEGRATION_TEST_PYTEST_MARKERS: "sequential"
        PYTHONIOENCODING: "utf-8"
      run: |
        make test-integration

  build_docker_base_images_and_set_env:
    name: Build Docker base images and setup environment
    runs-on: ubuntu-20.04
    outputs:
      base_image_hash: ${{ steps.check_image.outputs.base_image_hash }}
      base_mitie_image_hash: ${{ steps.check_image.outputs.base_mitie_image_hash }}
      base_builder_image_hash: ${{ steps.check_image.outputs.base_builder_image_hash }}
      # Tag name used for images created during Docker image builds, e.g. 3886 - a PR number
      image_tag: ${{ steps.set_output.outputs.image_tag }}
      # Return 'true' if tag version is equal or higher than the latest tagged Rasa version
      is_newest_version: ${{ steps.rasa_get_version.outputs.is_newest_version }}
    steps:
      # Due to an issue with checking out a wrong commit, we make sure
      # to checkout HEAD commit for a pull request.
      # More details: https://github.com/actions/checkout/issues/299
    - name: Checkout pull request HEAD commit instead of merge commit 🕝
      uses: actions/checkout@v2
      if: github.event_name == 'pull_request'
      with:
        ref: ${{ github.event.pull_request.head.sha }}

    - name: Checkout git repository 🕝
      uses: actions/checkout@v2
      if: github.event_name != 'pull_request'

    - name: Read Poetry Version 🔢
      run: |
        echo "POETRY_VERSION=$(scripts/poetry-version.sh)" >> $GITHUB_ENV
      shell: bash

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
      with:
        version: v0.5.1
        driver: docker

    - name: Login to DockerHub Registry 🔢
      run: echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ env.DOCKERHUB_USERNAME }} --password-stdin || true

    - name: Check if tag version is equal or higher than the latest tagged Rasa version
      id: rasa_get_version
      if: env.IS_TAG_BUILD == 'true'
      run: |
        # Get latest tagged Rasa version
        git fetch --depth=1 origin "+refs/tags/*:refs/tags/*"
        # Fetch branch history
        git fetch --prune --unshallow
        LATEST_TAGGED_NON_ALPHA_RASA_VERSION=$(git tag | sort -r -V | grep -E "^[0-9.]+$" | head -n1)
        CURRENT_TAG=${GITHUB_REF#refs/tags/}
        # Return 'true' if tag version is equal or higher than the latest tagged Rasa version
        IS_NEWEST_VERSION=$((printf '%s\n%s\n' "${LATEST_TAGGED_NON_ALPHA_RASA_VERSION}" "$CURRENT_TAG" \
          | sort -V -C && echo true || echo false) || true)
        # Avoid that the script gets released for alphas or release candidates
        if [[ "${IS_NEWEST_VERSION}" == "true" && "$CURRENT_TAG" =~ ^[0-9.]+$ ]]; then
          echo "::set-output name=is_newest_version::true"
        else
          echo "::set-output name=is_newest_version::false"
        fi

    - name: Check if a base image exists
      id: check_image
      env:
        DOCKER_CLI_EXPERIMENTAL: enabled
      run: |
        # Base image
        BASE_IMAGE_HASH=${{ hashFiles('docker/Dockerfile.base') }}
        echo "::set-output name=base_image_hash::${BASE_IMAGE_HASH}"

        BASE_IMAGE_EXISTS=$((docker manifest inspect rasa/rasa:base-${BASE_IMAGE_HASH} &> /dev/null && echo true || echo false) || true)
        echo "::set-output name=base_exists::${BASE_IMAGE_EXISTS}"

        # Base MITIE image
        BASE_MITIE_IMAGE_HASH=${{ hashFiles('docker/Dockerfile.base-mitie') }}
        MAKEFILE_MITIE_HASH=${{ hashFiles('Makefile') }}
        echo "::set-output name=base_mitie_image_hash::${BASE_MITIE_IMAGE_HASH:0:50}-${MAKEFILE_MITIE_HASH:0:50}"

        BASE_IMAGE_MITIE_EXISTS=$((docker manifest inspect rasa/rasa:base-mitie-${BASE_MITIE_IMAGE_HASH:0:50}-${MAKEFILE_MITIE_HASH:0:50} &> /dev/null && echo true || echo false) || true)
        echo "::set-output name=base_mitie_exists::${BASE_IMAGE_MITIE_EXISTS}"

        # Base poetry image
        BASE_IMAGE_POETRY_EXISTS=$((docker manifest inspect rasa/rasa:base-poetry-${{ env.POETRY_VERSION }} &> /dev/null && echo true || echo false) || true)
        echo "::set-output name=base_poetry_exists::${BASE_IMAGE_POETRY_EXISTS}"

        # Base builder image
        BASE_IMAGE_BUILDER_HASH=${{ hashFiles('docker/Dockerfile.base-builder') }}
        echo "::set-output name=base_builder_image_hash::${BASE_IMAGE_BUILDER_HASH}"

        BASE_IMAGE_BUILDER_EXISTS=$((docker manifest inspect rasa/rasa:base-builder-${BASE_IMAGE_BUILDER_HASH} &> /dev/null && echo true || echo false) || true)
        echo "::set-output name=base_builder_exists::${BASE_IMAGE_BUILDER_EXISTS}"

    - name: Build Docker base image and push 🛠 ⬆
      if: steps.check_image.outputs.base_exists == 'false' || env.IS_TAG_BUILD == 'true'
      run: |
        export IMAGE_TAG=${{ steps.check_image.outputs.base_image_hash }}
        docker buildx bake -f docker/docker-bake.hcl base --push

    - name: Build Docker mitie base image and push 🛠 ⬆
      if: steps.check_image.outputs.base_mitie_exists == 'false'
      run: |
        export IMAGE_TAG=${{ steps.check_image.outputs.base_mitie_image_hash }}
        docker buildx bake -f docker/docker-bake.hcl base-mitie --push

    - name: Build Docker poetry base image and push 🛠 ⬆
      if: steps.check_image.outputs.base_poetry_exists == 'false'
      run: |
        export IMAGE_TAG=${{ env.POETRY_VERSION }}
        export BASE_IMAGE_HASH=${{ steps.check_image.outputs.base_image_hash }}
        docker buildx bake -f docker/docker-bake.hcl base-poetry --push

    - name: Build Docker builder base image and push 🛠 ⬆
      if: steps.check_image.outputs.base_builder_exists == 'false'
      run: |
        export IMAGE_TAG=${{ steps.check_image.outputs.base_builder_image_hash }}
        docker buildx bake -f docker/docker-bake.hcl base-builder --push

    # Set environment variables for a pull request
    #
    # In this scenario, we've created a PR #1234
    #
    # Example output:
    # IMAGE_TAG=1234
    - name: Set environment variables - pull_request
      if: github.event_name == 'pull_request' && env.IS_TAG_BUILD == 'false'
      run: |
        echo "IMAGE_TAG=${{ github.event.number }}" >> $GITHUB_ENV

    # Set environment variables for a tag
    #
    # In this scenario, we've pushed the '2.0.6' tag
    #
    # Example output:
    # TAG_NAME=2.0.6
    # IMAGE_TAG=2.0.6
    - name: Set environment variables - push - tag
      if: github.event_name == 'push' && env.IS_TAG_BUILD == 'true'
      run: |
        TAG_NAME=${GITHUB_REF#refs/tags/}
        echo "IMAGE_TAG=${TAG_NAME}" >> $GITHUB_ENV

    # Set environment variables for a branch
    #
    # In this scenario, we've pushed changes into the main branch
    #
    # Example output:
    # IMAGE_TAG=main
    - name: Set environment variables - push - branch
      if: github.event_name == 'push' && env.IS_TAG_BUILD == 'false'
      run: |
        BRANCH_NAME=${GITHUB_REF#refs/heads/}
        SAFE_BRANCH_NAME="$(echo ${GITHUB_REF#refs/heads/} | sed 's/[\\*+.$\#\-\/]/-/g')"
        echo "IMAGE_TAG=${SAFE_BRANCH_NAME}" >> $GITHUB_ENV

    - name: Set output
      id: set_output
      run: |
        echo "::set-output name=image_tag::${{ env.IMAGE_TAG }}"

  docker:
    name: Build Docker
    runs-on: ubuntu-20.04
    needs: [changes, build_docker_base_images_and_set_env]
    env:
      IMAGE_TAG: ${{ needs.build_docker_base_images_and_set_env.outputs.image_tag }}
      BASE_IMAGE_HASH: ${{ needs.build_docker_base_images_and_set_env.outputs.base_image_hash }}
      BASE_MITIE_IMAGE_HASH: ${{ needs.build_docker_base_images_and_set_env.outputs.base_mitie_image_hash }}
      BASE_BUILDER_IMAGE_HASH: ${{ needs.build_docker_base_images_and_set_env.outputs.base_builder_image_hash }}

    strategy:
      matrix:
        image: [default, full, mitie-en, spacy-de, spacy-en]

    steps:
      # Due to an issue with checking out a wrong commit, we make sure
      # to checkout HEAD commit for a pull request.
      # More details: https://github.com/actions/checkout/issues/299
    - name: Checkout pull request HEAD commit instead of merge commit 🕝
      uses: actions/checkout@v2
      if: github.event_name == 'pull_request'
      with:
        ref: ${{ github.event.pull_request.head.sha }}

    - name: Checkout git repository 🕝
      uses: actions/checkout@v2
      if: github.event_name != 'pull_request'

    - name: Free disk space
      if: needs.changes.outputs.docker == 'true'
      # tries to make sure we do not run out of disk space, see
      # https://github.community/t5/GitHub-Actions/BUG-Strange-quot-No-space-left-on-device-quot-IOExceptions-on/td-p/46101
      run: |
        sudo swapoff -a
        sudo rm -f /swapfile
        sudo apt clean
        docker rmi $(docker image ls -aq)
        df -h

    - name: Read Poetry Version 🔢
      run: |
        echo "POETRY_VERSION=$(scripts/poetry-version.sh)" >> $GITHUB_ENV
      shell: bash

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
      with:
        version: v0.5.1
        driver: docker

    - name: Login to DockerHub Registry 🔢
      if: needs.changes.outputs.docker == 'true'
      run: echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ env.DOCKERHUB_USERNAME }} --password-stdin || true

    - name: Copy Segment write key to the package
      if: needs.changes.outputs.docker == 'true' && github.event_name == 'push' && startsWith(github.ref, 'refs/tags') && github.repository == 'RasaHQ/rasa'
      env:
        RASA_TELEMETRY_WRITE_KEY: ${{ secrets.RASA_OSS_TELEMETRY_WRITE_KEY }}
        RASA_EXCEPTION_WRITE_KEY: ${{ secrets.RASA_OSS_EXCEPTION_WRITE_KEY }}
      run: |
        ./scripts/write_keys_file.sh

    - name: Build Docker image
      if: needs.changes.outputs.docker == 'true'
      run: |
        docker buildx bake -f docker/docker-bake.hcl ${{ matrix.image }}

    - name: Push image with main tag 📦
      if: needs.changes.outputs.docker == 'true' && github.event_name == 'push' && github.ref == 'refs/heads/main' && github.repository == 'RasaHQ/rasa'
      run: |
        docker buildx bake -f docker/docker-bake.hcl ${{ matrix.image }} --push

    - name: Push image with ${{github.ref}} tag 📦
      if: needs.changes.outputs.docker == 'true' && github.event_name == 'push' && env.IS_TAG_BUILD == 'true' && github.repository == 'RasaHQ/rasa'
      run: |
        IS_NEWEST_VERSION=${{ needs.build_docker_base_images_and_set_env.outputs.is_newest_version }}

        docker buildx bake -f docker/docker-bake.hcl ${{ matrix.image }} --push

        # Tag the image as latest
        if [[ "${IS_NEWEST_VERSION}" == "true" ]]; then
          if [[ "${{ matrix.image }}" == "default" ]]; then
            RELEASE_TAG="${IMAGE_TAG}"
          else
            RELEASE_TAG="${IMAGE_TAG}-${{ matrix.image }}"
          fi

          LATEST_TAG=$(echo $RELEASE_TAG | sed 's/'$IMAGE_TAG'/latest/g')

          docker tag rasa/rasa:${RELEASE_TAG} rasa/rasa:${LATEST_TAG}
          docker push rasa/rasa:${LATEST_TAG}
        fi

  deploy:
    name: Deploy to PyPI
    runs-on: ubuntu-latest

    # deploy will only be run when there is a tag available
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags') && github.repository == 'RasaHQ/rasa'
    needs: [quality, test, documentation, docker]  # only run after all other stages succeeded

    steps:
    - name: Checkout git repository 🕝
      uses: actions/checkout@v2

    - name: Set up Python 3.6 🐍
      uses: actions/setup-python@v1
      with:
        python-version: 3.6

    - name: Read Poetry Version 🔢
      run: |
        echo "POETRY_VERSION=$(scripts/poetry-version.sh)" >> $GITHUB_ENV
      shell: bash

    - name: Install poetry 🦄
      uses: Gr1N/setup-poetry@v4
      with:
        poetry-version: ${{ env.POETRY_VERSION }}

    - name: Copy Segment write key to the package
      env:
        RASA_TELEMETRY_WRITE_KEY: ${{ secrets.RASA_OSS_TELEMETRY_WRITE_KEY }}
        RASA_EXCEPTION_WRITE_KEY: ${{ secrets.RASA_OSS_EXCEPTION_WRITE_KEY }}
      run: |
        ./scripts/write_keys_file.sh

    - name: Build ⚒️ Distributions
      run: poetry build

    - name: Publish to PyPI 📦
      uses: pypa/gh-action-pypi-publish@37e305e7413032d8422456179fee28fac7d25187
      with:
        user: __token__
        password: ${{ secrets.PYPI_TOKEN }}

    - name: Notify Sentry about the release
      env:
        GITHUB_TAG: ${{ github.ref }}
        SENTRY_ORG: rasahq
        SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      run: |
        curl -sL https://sentry.io/get-cli/ | bash
        GITHUB_TAG=${GITHUB_TAG/refs\/tags\//}
        sentry-cli releases new -p rasa-open-source "rasa-$GITHUB_TAG"
        sentry-cli releases set-commits --auto "rasa-$GITHUB_TAG"
        sentry-cli releases finalize "rasa-$GITHUB_TAG"

    - name: Notify Slack & Publish Release Notes 🗞
      env:
        GH_RELEASE_NOTES_TOKEN: ${{ secrets.GH_RELEASE_NOTES_TOKEN }}
        SLACK_WEBHOOK_TOKEN: ${{ secrets.SLACK_WEBHOOK_TOKEN }}
        GITHUB_TAG: ${{ github.ref }}
        GITHUB_REPO_SLUG: ${{ github.repository }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        GITHUB_TAG=${GITHUB_TAG/refs\/tags\//}
        pip install -U github3.py pep440-version-utils
        python3 scripts/publish_gh_release_notes.py
        ./scripts/ping_slack_about_package_release.sh

  mergepal-merge: # run merge pal in the end
    runs-on: ubuntu-latest
    needs: [quality, test, documentation, docker]
    steps:
      - uses: actions/checkout@v1
      - name: Make sure there is a github token
        shell: bash
        run: |
          if [ -z "${{ secrets.RASABOT_AUTOMERGE_GITHUB_TOKEN }}" ]; then
            echo "MERGE_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV
          else
            echo "MERGE_TOKEN=${{ secrets.RASABOT_AUTOMERGE_GITHUB_TOKEN }}" >> $GITHUB_ENV
          fi
      - uses: rasahq/merge-pal-action@master
        with:
          token: ${{ env.MERGE_TOKEN }}
